#include <memory>
#include <iostream>
#include <cxxtest/TestSuite.h>
#include "../geotypes.hpp"
#include "../hgrid.hpp"
#include "hierarchal_grid_debug_extension.cpp"

class TestSuiteHierarchalGrid: public CxxTest::TestSuite{

	public: void testInitializeHierarchalBoundingBox(){
		hgrid myHGrid;

		std::shared_ptr<AABB> a(new AABB);
		std::shared_ptr<AABB> b(new AABB);
		std::shared_ptr<AABB> c(new AABB);
		std::shared_ptr<AABB> d(new AABB);
		std::shared_ptr<AABB> e(new AABB);
		std::shared_ptr<AABB> f(new AABB);//objects we will place into the 3d grid.
		//our objects are given locations
		a->Location.push_back(0);
		a->Location.push_back(0);
		a->Location.push_back(0);
		a->Dimensions.push_back(12);
		a->Dimensions.push_back(12);
		a->Dimensions.push_back(12);

		//located at (x,y,z) = (11,11,0)
		//with size 12 x 2 x 2
		b->Location.push_back(11);
		b->Location.push_back(11);
		b->Location.push_back(0);
		b->Dimensions.push_back(12);
		b->Dimensions.push_back(2);
		b->Dimensions.push_back(2);


		c->Location.push_back(70);
		c->Location.push_back(70);
		c->Location.push_back(0);
		c->Dimensions.push_back(2);
		c->Dimensions.push_back(2);
		c->Dimensions.push_back(2);

		d->Location.push_back(70);
		d->Location.push_back(70);
		d->Location.push_back(0);
		d->Dimensions.push_back(4);
		d->Dimensions.push_back(4);
		d->Dimensions.push_back(4);

		e->Location.push_back(70);
		e->Location.push_back(70);
		e->Location.push_back(0);
		e->Dimensions.push_back(40);
		e->Dimensions.push_back(40);
		e->Dimensions.push_back(40);

		f->Location.push_back(0);
		f->Location.push_back(0);
		f->Location.push_back(0);
		f->Dimensions.push_back(1);
		f->Dimensions.push_back(1);
		f->Dimensions.push_back(1);

		TS_ASSERT(myHGrid.CellCount() == 0);
		TS_ASSERT(myHGrid.GridCount() == 0);
		
		myHGrid.Add(a);
		TS_ASSERT(myHGrid.CellCount() == 8);
		TS_ASSERT(myHGrid.GridCount() == 1);
		
		myHGrid.Add(b);
		TS_ASSERT(myHGrid.CellCount() == 8);
		TS_ASSERT(myHGrid.GridCount() == 1);

		myHGrid.Add(b);
		TS_ASSERT(myHGrid.CellCount() == 8);
		TS_ASSERT(myHGrid.GridCount() == 1);

		myHGrid.Add(c);
		TS_ASSERT(myHGrid.CellCount() == 12);
		TS_ASSERT(myHGrid.GridCount() == 2);

		myHGrid.Add(d);
		TS_ASSERT(myHGrid.CellCount() == 16);
		TS_ASSERT(myHGrid.GridCount() == 3);

		myHGrid.Add(e);
		TS_ASSERT(myHGrid.CellCount() == 20);
		TS_ASSERT(myHGrid.GridCount() == 4);

		myHGrid.Add(f);
		TS_ASSERT(myHGrid.CellCount() == 21);
		TS_ASSERT(myHGrid.GridCount() == 5);

		hgrid myHGridTwo;
		
		/*Copy one hgrid into the next. Our numbers will be different, as the
		  objects will be repackaged into the new grid in a different sequence
		  than when they were packaged into the original grid */
		myHGridTwo.Add(myHGrid.Export());
		TS_ASSERT(myHGrid.CellCount() == 21);
		TS_ASSERT(myHGrid.GridCount() == 5);
		TS_ASSERT(myHGridTwo.CellCount() ==25);
		TS_ASSERT(myHGridTwo.GridCount() == 6);
	
		/*Clear the grid and make sure it is empty. Also check that our copied grid
		  has clean data after the original was stored (decoupled) */	
		myHGrid.Clear();
		TS_ASSERT(myHGrid.CellCount() == 0);
		TS_ASSERT(myHGrid.GridCount() == 0);
		TS_ASSERT(myHGridTwo.CellCount() ==25);
		TS_ASSERT(myHGridTwo.GridCount() == 6);

	}

	public: void testHierarchalIterator(){

		HGDE myHGrid;
		myHGrid.debug = true;

		std::shared_ptr<AABB> a(new AABB);
		std::shared_ptr<AABB> b(new AABB);
		std::shared_ptr<AABB> c(new AABB);
		std::shared_ptr<AABB> d(new AABB);
		std::shared_ptr<AABB> e(new AABB);
		std::shared_ptr<AABB> f(new AABB);//objects we will place into the 3d grid.
		//our objects are given locations
		a->Location.push_back(0);
		a->Location.push_back(0);
		a->Location.push_back(0);
		a->Dimensions.push_back(12);
		a->Dimensions.push_back(12);
		a->Dimensions.push_back(12);

		//located at (x,y,z) = (11,11,0)
		//with size 12 x 2 x 2
		b->Location.push_back(11);
		b->Location.push_back(11);
		b->Location.push_back(0);
		b->Dimensions.push_back(12);
		b->Dimensions.push_back(2);
		b->Dimensions.push_back(2);

		c->Location.push_back(70);
		c->Location.push_back(70);
		c->Location.push_back(0);
		c->Dimensions.push_back(2);
		c->Dimensions.push_back(2);
		c->Dimensions.push_back(2);

		d->Location.push_back(70);
		d->Location.push_back(70);
		d->Location.push_back(0);
		d->Dimensions.push_back(4);
		d->Dimensions.push_back(4);
		d->Dimensions.push_back(4);

		e->Location.push_back(70);
		e->Location.push_back(70);
		e->Location.push_back(0);
		e->Dimensions.push_back(40);
		e->Dimensions.push_back(40);
		e->Dimensions.push_back(40);

		f->Location.push_back(0);
		f->Location.push_back(0);
		f->Location.push_back(0);
		f->Dimensions.push_back(1);
		f->Dimensions.push_back(1);
		f->Dimensions.push_back(1);

		
		myHGrid.Add(a);
		myHGrid.Add(b);
		myHGrid.Add(b);
		myHGrid.Add(c);
		myHGrid.Add(d);
		myHGrid.Add(e);
		myHGrid.Add(f);

		HGDE myHGridTwo;
		myHGridTwo.debug = true;

		/*Copy one hgrid into the next. Our numbers will be different, as the
		  objects will be repackaged into the new grid in a different sequence
		  than when they were packaged into the original grid */
		myHGridTwo.Add(myHGrid.Export());
		
		//iterate through all cells in the hierarchal grid structure
		hgrid::const_iterator i = myHGridTwo.begin();
		while(i!=myHGridTwo.end()){
			++i;
		}
	}
};
