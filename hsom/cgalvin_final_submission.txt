/* FILE: ghsom.cpp */

#include <thread>
#include "./src/ghmodel.hpp"//model aggregates 3d SOM model, 3d camera view, and SDL event controller into a unified state object
#include "./src/viewer3d.hpp"//view - openGL camera rendering logic
#include "./src/controller3d.hpp"//controller - flushes SDL event queue in order to manipulates model

typedef boost::shared_mutex Lock;
typedef boost::unique_lock<Lock> WriteLock;
typedef boost::shared_lock<Lock> ReadLock;

//provides a read/write lock for our cells array
Lock r_w_lock;

void viewThreadRun(model* myModel, viewer3d* myView){
	while(!myModel->terminateProgram){
		//take read-access
		ReadLock rLock(r_w_lock);
		myView->render(myModel);//draw model to screen with view parameters
		rLock.unlock();
	}
}

void controllerThreadRun(model* myModel, viewer3d* myView){
	while(!myModel->terminateProgram){
		//lock read/write access
		WriteLock wLock(r_w_lock);
		controller3d::emptySDLEventBuffer(myModel,myView);//user acts on the model and view
		wLock.unlock();
	}
}

int main(){

	//retrieve window initialization settings and initialize the window
	viewer3d* myView = new viewer3d();
	myView->init();

	//create and initialize program model consisting of SOM structure, 3d camera viewer, and event-handler control
	model* myModel = new model();
	myModel->init();

	//our view runs independently of our controller, allowing us to see the training in real-time
	//however, the controller is still in the same thread as the training logic
	//meaning we cannot position/orient the camera while in the middle of a training session
	std::thread t(controllerThreadRun,myModel,myView);
	viewThreadRun(myModel,myView);

	t.join();
	return 0;
}

/*FILE: ./src/ghmodel.hpp */

//3d SOM model
#include "somIII.hpp"

//for hierarchal som navigation
#include "somStack.hpp"

//simplified adapter/wrapper for SDL library window creation & 2d drawing functions
//SDL.h and SDL_image.h included internally, which includes SDL_Event for our controller routines
#include "render.hpp"

//library for rendering an openGL context to an SDL window
#include "SDL/SDL_opengl.h"

//3d viewing model
#include "camera.hpp"

//import SOM training vectors during initialization
#include "tspFileReader.hpp"

class model{
	public:
		//self-organizing map model is our focus
		som mySOM;

		//camera class for viewing som model
		camera* cam;

		somStack mySomStack;

		//sdl event pipeline handled by controller
		bool terminateProgram;	
		SDL_Event event;

		//clicking in the window sets our mouse x/y offset here, and triggers the view to calculate
		//any cell collisions with the mouse vector. If collisions found, the nearest is placed here
		//Otherwise, selectedIndex < 0 (=-1).
		//mouseX and mouseY are written to by the SDL Controller only
		//selectedIndex is written to by the viewer only. This is done after the view reads mouse x/y
		//once selectedIndex is set to a real value (>0), who acts on it? how/when?
		int selectedIndex;
		int mouseX;
		int mouseY;

		void init(){
			mouseX = 0;
			mouseY = 0;
			selectedIndex = -1;	
			//use time to get more random initial SOM arrangement
			srand(time(NULL));

			TSPFileReader trainingVectorFactory;
			vector<neuron> TrainingNeurons;

			//TrainingNeurons = trainingVectorFactory.retrieveTrainingVectors("./maps/RGB.tsp");
	
			neuron myNewNeuron;
			//data randomly generated
			for(int i=0; i<300; i++){
				for (int j=0;j<3;j++){
					myNewNeuron.push_back(randomFloatInRange(0,255)); 
				}
				TrainingNeurons.push_back(myNewNeuron);
				myNewNeuron.clear();
			}

			//clustered data added
			for(int i=0; i<100; i++){
				for(int j=0;j<3;j++){
					//add only high-blue values
					if(j==0){
						myNewNeuron.push_back(randomFloatInRange(0,255)); 
					}else{
						myNewNeuron.push_back(0); 
					}
				}
				TrainingNeurons.push_back(myNewNeuron);
				myNewNeuron.clear();
			}
			//clustered data added
			for(int i=0; i<100; i++){
				for(int j=0;j<3;j++){
					//add only high-blue values
					if(j==1){
						myNewNeuron.push_back(randomFloatInRange(0,255)); 
					}else{
						myNewNeuron.push_back(0); 
					}
				}
				TrainingNeurons.push_back(myNewNeuron);
				myNewNeuron.clear();
			}
			//clustered data added
			for(int i=0; i<100; i++){
				for(int j=0;j<3;j++){
					//add only high-blue values
					if(j==2){
						myNewNeuron.push_back(randomFloatInRange(0,255)); 
					}else{
						myNewNeuron.push_back(0); 
					}
				}
				TrainingNeurons.push_back(myNewNeuron);
				myNewNeuron.clear();
			}

			cam = new camera();
			cam->translateRight(0.75);
			cam->translateUp(0.75);
			cam->translateForward(-1.75);


			//colourcube: 3d data, 3d mesh(10x10x10), 1000 training iterations
			mySOM.init(TrainingNeurons,7,7,7,50);

			terminateProgram = false;
		}
};
/* FILE: ./src/controller3d.hpp */
namespace controller3d{

	void SDL_WindowContext(model* m){
		if(m->event.type==SDL_QUIT){
			m->terminateProgram = true;
		}
	}

	void QueryContext(model* m){
		if(m->event.type == SDL_KEYDOWN){
			switch(m->event.key.keysym.sym){
				case SDLK_ESCAPE: m->mySOM.selectedCellGroup.clear();
						m->mySOM.selectedBMUGroup.clear();
						m->mySOM.selectedCellSingle = -1; break;
				case SDLK_g: m->mySOM.getCloudAll(m->mySOM.cells[m->mySOM.selectedCellSingle],pow(0.2,m->mySomStack.size()+1)) ; break;
				case SDLK_t: m->mySOM.getCloudBMU(m->mySOM.cells[m->mySOM.selectedCellSingle],pow(0.2,m->mySomStack.size()+1)) ; break;
				case SDLK_LEFTBRACKET: m->mySOM = m->mySomStack.push(m->mySOM); break;
				default: break;
			}
		}
	}

	void TrainingContext(model* m){
		if(m->event.type == SDL_KEYDOWN){
			switch(m->event.key.keysym.sym){
				//we don't need to have a selection to pop from the stack, so this is moved here
				case SDLK_RIGHTBRACKET: 
					if(m->mySomStack.size() >0)
						m->mySOM = m->mySomStack.pop(); 
					break;
				case SDLK_1: m->mySOM.trainStep() ; break;
				case SDLK_2: m->mySOM.trainPass() ; break;
				case SDLK_3: m->mySOM.trainAll(); break;
				default: break;
			}
		}
	}

	void FirstPersonCameraContext(model* m,viewer3d* v){
		if(m->event.type == SDL_KEYDOWN){
			switch(m->event.key.keysym.sym){
				case SDLK_w:m->cam->ForwardForce->magnitude += 0.1 ; break;
				case SDLK_s:m->cam->ForwardForce->magnitude -= 0.1 ; break;
				case SDLK_d:m->cam->RightForce->magnitude -= 0.1 ; break;
				case SDLK_a:m->cam->RightForce->magnitude += 0.1 ; break;
				case SDLK_e:m->cam->UpForce->magnitude -= 0.1 ; break;
				case SDLK_q:m->cam->UpForce->magnitude +=0.1 ; break;
				case SDLK_i:m->cam->rotateX(5) ; break;
				case SDLK_k:m->cam->rotateX(-5) ; break;
				case SDLK_j:m->cam->rotateY(5) ; break;
				case SDLK_l:m->cam->rotateY(-5) ; break;
				case SDLK_o:m->cam->rotateZ(5) ; break;
				case SDLK_u:m->cam->rotateZ(-5) ; break;
			}
		}else if(m->event.type == SDL_KEYUP){
			switch(m->event.key.keysym.sym){
				case SDLK_w:m->cam->ForwardForce->magnitude -= 0.1 ; break;
				case SDLK_s:m->cam->ForwardForce->magnitude += 0.1 ; break;
				case SDLK_d:m->cam->RightForce->magnitude += 0.1 ; break;
				case SDLK_a:m->cam->RightForce->magnitude -= 0.1 ; break;
				case SDLK_e:m->cam->UpForce->magnitude += 0.1 ; break;
				case SDLK_q:m->cam->UpForce->magnitude -=0.1 ; break;
			}
		}else if(m->event.type == SDL_MOUSEBUTTONUP ){
			//mouse picking triggers hsom creation

			//find clicked cell (if any). 
			//mousePickingPass will trigger the viewer to interrupt a render cycle for a picking pass
			m->mouseX = m->event.button.x;
			m->mouseY = m->event.button.y;
			v->mousePickingPass = true; 
			//find all cells similar to selected cell
			//find subset of training vectors that map to cell set
			//create new SOM consisting only of training vector subset
		}
	}
	
	//flush our sdl event pipeline
	void emptySDLEventBuffer(model* m,viewer3d* v){
		while(SDL_PollEvent(&m->event)){
			SDL_WindowContext(m);
			FirstPersonCameraContext(m,v);
			TrainingContext(m);
			//only allow query operations on a completely trained som with a user-selected cell
			if(m->mySOM.train_current == 0 && m->mySOM.selectedCellSingle > -1){
				QueryContext(m);
			}
		}
		
	}

}
/* FILE: ./src/somIII.hpp */
#include "float.h"
#include "math.h"
#include "vectorMath.hpp"
#include <algorithm>
#include <queue>
#include <set>
#include <boost/thread/locks.hpp>
#include <boost/thread/shared_mutex.hpp>

using namespace std;

typedef vector<float> neuron;

float randomFloatInRange(float startRange, float endRange){
	float random = ((float) rand()) / (float) RAND_MAX;
	float range = endRange-startRange;
	return (random*range) + startRange;
}

class som{

	//protected so inherited functions have deep access.
	protected:



		//training buffer lets us view a step-by-step of each training iteration
		void fillTrainingBuffer(){
			if(train_current>0){
				random_shuffle(trainingVectors.begin(),trainingVectors.end());
				for(int i = 0; i < trainingVectors.size(); i++)
					trainingBuffer.push(trainingVectors[i]);
				train_current--;
			}
		}
		
		void trainNeighbors(neuron trainingNeuron, int winner, float neigbourhoodSize, float learningCoefficient){

			//convert array index of BMU to SOM x/y/z cell coordinates
			vector<float> meshLocWinner;
			meshLocWinner.push_back((winner/(w*d))/(float)h);
			meshLocWinner.push_back( (((int)(winner/d))%w)/(float)w );
			meshLocWinner.push_back((winner%d)/(float)d);
			

			//temp variable to do the above to each SOM vector for comparison with BMU
			vector<float> meshLocCurrent;
			meshLocCurrent.push_back(0);
			meshLocCurrent.push_back(0);
			meshLocCurrent.push_back(0);
			
			float maxDistance = neigbourhoodSize;	
			for(int i = 0; i < cells.size(); i++){
				//get SOM x/y/z cell coordinates for SOM cell i
				meshLocCurrent[0] = (i/(w*d))/(float)h;
				meshLocCurrent[1] = (((int)(i/d))%w)/(float)w;
				meshLocCurrent[2] = (i%d)/(float)d;
			
				//determine if this SOM cell is in neighborhood
				float currentDistance=absDistance(meshLocCurrent,meshLocWinner);
				if(currentDistance < maxDistance){
					//if so, adjust accordingly
					float influence = ((maxDistance-currentDistance)/maxDistance)*learningCoefficient;
					cells[i] = attract(trainingNeuron,cells[i],influence);
				}
			}

		}
		
		int findBMU(neuron trainingNeuron){
			//start far away so our neural network is clearly nearer.
			float nearestDistance= FLT_MAX;
			int winningPosition;
			//cout<<"Green value:"<<trainingNeuron[1]<<"\n";
			for(int i = 0 ; i < cells.size(); i++){
				//calculate euclidian distance between training neuron and current neuron
				float currentDistance = absDistance(trainingNeuron,cells[i]);	
				if(currentDistance < nearestDistance){
					nearestDistance = currentDistance;
					winningPosition=i;
				}
			}
			return winningPosition;
		}

		//this can help us decide which cells fit a group query by giving us a metric of similarity to a given inputVector
		//tolerance is described here as 'MQE' percentage (0.0 to 1.0) of our SOM data range.
		vector<float> getTolerance(float MQE){
			//get the domain of our SOM space;
			//hard coded for color data here since dynamic calculation costs h*w*d*inputVector.size() iterations
			vector<float> minVal;
			minVal.push_back(0);
			minVal.push_back(0);
			minVal.push_back(0);

			vector<float> maxVal;
			maxVal.push_back(255);
			maxVal.push_back(255);
			maxVal.push_back(255);

			vector<float> range = delta(maxVal,minVal);
			range = scale(MQE,range);
			cout<<"range:"<<range[0]<<" "<<range[1]<<" "<<range[2]<<"\n";
			return range;

		}

	public:
		//cube dimensions
		int h;
		int w;
		int d;
		
		//data to train the SOM to
		vector<neuron> trainingVectors;
		queue<neuron> trainingBuffer;

		//for step-by-step training (allowing for rendering between)
		int train_max;
		int train_current;

		//the SOM data structure
		vector < neuron > cells;

		//mouse picking index
		int selectedCellSingle;

		//cloud selection group
		vector < int > selectedCellGroup;

		//cloud selection group
		set < int > selectedBMUGroup;

		void init(vector< neuron > t_v, int x_res, int y_res, int z_res, int tIterations){
			cout<<"size: "<<t_v.size()<<"\n";

			//no cell initially selected
			selectedCellSingle = -1;

			//save a copy of the vectors we are to train to
			trainingVectors = t_v;


			//3d placement in a 1d vector will take some array calculation
			h = y_res;
			w = x_res;
			d = z_res;

			//train_current counts down from max to zero
			train_max = train_current = tIterations;

			//3d iterative indexing
			for(int i = 0; i < h; i++){
				for(int j = 0; j < w; j++){
					for(int k = 0; k < d; k++){
						neuron myNewNeuron;
						//each som vector has the same dimensions as the training vectors
						for(int l =0; l < trainingVectors[0].size(); l++){
							myNewNeuron.push_back(randomFloatInRange(0,255)); 
						}
						cells.push_back(myNewNeuron);
					}
				}
			}

			fillTrainingBuffer();
			cout<<"init complete\n";
		}
		
		//estimate an appropriate SOM size based on the number of input vectors
		//we assume a 3D som in a cube structure to be appropriate
		void init(vector< neuron > t_v, int tIterations){
			//cube root to evenly divide input vectors along square 3d structure
			//we round this value up by adding one before dropping decimal in integer conversion
			int size = pow(t_v.size(),1.0/3.0) + 1;
			init(t_v,size,size,size,tIterations);
		}

		//take a single random training vector and impress it on the SOM
		//training vectors are arranged in the queue (trainingBuffer) to ensure even distribution of training impressions
		void trainStep(){
			if(trainingBuffer.size()>0){
				vector<float> singleTrainingVector = trainingBuffer.front();
				trainingBuffer.pop();
				int BMU = findBMU(singleTrainingVector);
				trainNeighbors(singleTrainingVector, BMU, train_current/(float)train_max, train_current/(float)train_max);
			}else{
				fillTrainingBuffer();
			}
		}

		//train until the trainingBuffer is empty
		void trainPass(){
			//technically we should use a read lock. Practically, no current use-case has more than one thread access trainingBuffer
			while(trainingBuffer.size()>0){
				trainStep();
			}
			fillTrainingBuffer();
		}


		void trainAll(){
			//technically we should use a read lock. Practically, no current use-case has more than one thread access train_current
			while(train_current > 0){
				trainPass();
			}
		}

		

		//get the set of SOM vectors that are less than MQE percent different from inputVector
		//this is a way to select all our som data in a region,
		//which includes a cloud of SOM data that is (fuzzy logic) 'like' our inputVector
		vector< vector< float > > getCloudAll(vector<float> inputVector, float MQE){
			//The tolerance describes
			//an acceptable amount of deviation from the inputVector
			//to help us define our cloud.
			vector<float> tolerance = getTolerance(MQE);

			//find all SOM data that is 'within tolerance' of our input vector
			vector< vector< float > > resultData;
			vector< int > resultIndex;
			for(int i = 0; i<h*w*d; i++){
				//if the cell is near enough our input vector (closer than the length of our tolerance vector)
				if(vLength(delta(inputVector,cells[i])) < vLength(tolerance)){
					//push to our winning neuron list
					resultData.push_back(cells[i]);
					resultIndex.push_back(i);
				}
				
			}


			//save the last known selection group in our model for easy reference while rendering
			selectedCellGroup = resultIndex;

			//give the user the detailed version of the query
			return resultData;
		}

		//get the set of trainingVectors that are less than MQE percent different from inputVector.
		//sort by proximity to inputVector.
		//this is a way to select the 'real data' in a region, 
		//which best represents our training procedure vectors
		void getCloudBMU(vector<float> inputVector, float MQE){
			//I chose a set to cull duplicates
			//first we find the set of all BMU's to our training inputs
			set<int> BMUIndexSet;


			for(int i = 0; i < trainingVectors.size();i++){
				//get the set of BMU's
				BMUIndexSet.insert(findBMU(trainingVectors[i]));
				
			}
			//next we make a set of all selected/hilighted cells in our cloud
			//convert the vector list to a proper set
			set<int> SelectedSet;
			for(int i = 0; i <selectedCellGroup.size();i++){
				SelectedSet.insert(selectedCellGroup[i]);
			}

			//std lib set intersection algorithm. Intersection stored in results variable
			set<int> results;
			set_intersection(BMUIndexSet.begin(), BMUIndexSet.end(),SelectedSet.begin(), SelectedSet.end(), 
				insert_iterator< set<int> >(results, results.begin()));

			cout<<"Selected IV size: "<<getCloudIV().size()<<"\n";
			selectedBMUGroup = results;
		}

		//return all input vectors coupled to the selected BMU cells
		vector<neuron> getCloudIV(){
			vector<neuron> results;
			for(int i=0; i<trainingVectors.size(); i++){
				int n = findBMU(trainingVectors[i]);
				if(find(selectedCellGroup.begin(),selectedCellGroup.end(),n) != selectedCellGroup.end() ){
					results.push_back(trainingVectors[i]);
				}	
			}
			return results;
		}

};

/* FILE: ./src/somStack.hpp */
#include <stack>

class somStack{

	private:

		//bottom of the stack is our entire data set. pushed on top of it are progressively smaller som data sets
		//and the members of the som parent class is the data we currently have loaded for visualization/manipulation
		//this is quick and easy to build, at the cost of duplicated input vector representation.
		//optimization can be done to correct this at a later time
		stack<som> somStack;

	public:
		int size(){return somStack.size();}
		//the training vectors pushed to the internal som is the set of selected BMUs in the current som
		som push(som s){
			cout<<"PUSHING_STACK!\n";

			somStack.push(s);

			//return new som context based off of previous som selection
			som subsetSOM;
			subsetSOM.init(s.getCloudIV(),s.train_max);
			return subsetSOM;
		}

		som pop(){
			if(!somStack.empty()){
				cout<<"POPPING_STACK!\n";
				//remove the top som from the stack and reinitialize our current class variables to the 
				//this is like 'zooming out' of the som data
				som lastSOM = somStack.top();
				cout<<"IV size: "<<lastSOM.trainingVectors.size()<<"\n";
				somStack.pop();
				return lastSOM;
			}else{
				cout<<"cannot pop empty stack\n";
			}
		}

};
/* FILE: ./src/tspFileReader.hpp */
#include <boost/tokenizer.hpp>
#include <fstream>
#include <string>

class TSPFileReader{
public:

	vector<neuron> retrieveTrainingVectors(string filename){
		string line;
		vector<neuron> myTrainingNeurons; 

		ifstream myfile(filename.c_str());
		if(myfile.is_open()){
				//skip metadata and go right to TSP city locations
				bool foundEndOfMetaData = false;
				while(!foundEndOfMetaData && myfile.good()){
					if(line.size()>0){
					}
					getline(myfile,line);
					size_t found = line.find("NODE_COORD_SECTION");
					if(found!=string::npos){
						foundEndOfMetaData = true;
					}
				}
				//TSP data is terminated with the string "EOF"
				bool foundEndOfFile = false;
				while(!foundEndOfFile && myfile.good()){
					getline(myfile,line);
					size_t found = line.find("EOF");
					if(found!=string::npos){
						foundEndOfFile = true;
					}else{

						boost::char_separator<char> tokenDivider(" ");
						//each TSP line has 3 datapoints: cityID, xLoc, yLoc. we are only interested in last 2
						boost::tokenizer<> tokens(line);

						neuron NewTrainingNeuron;
						int i = 0;
						for(boost::tokenizer<>::iterator t = tokens.begin(); t!=tokens.end();++t){
							string s = (string)t->c_str();
							if(i!=0 && s.find("\t") == string::npos){//skip 'index' value and go straight to vector data
								NewTrainingNeuron.push_back(atof(t->c_str()));
							}
							i++;
						}
						
						myTrainingNeurons.push_back(NewTrainingNeuron);
					}
				}
			myfile.close();
			
		}

		return myTrainingNeurons;
	}

};
/* FILE: ./src/viewer3d.hpp */
class viewer3d{

	private:

	struct SDLDrawMetaData{
		static const int screen_w=900;
		static const int screen_h=600;
		static const int screen_bpp=32;
		static const int fps=60;
		SDL_Surface *screen;
	}sdl;

	SDL_Surface* cubeTexture;

	//z-picking with mouse interaction
	static const int BUFSIZE = 8192;
	GLuint selectBuf[BUFSIZE];

	int processHits(int hits, GLuint buffer[]){
		printf ("Click hits = %d\n", hits);

		GLuint *hitPtr = buffer;
		GLuint names;

		GLuint *winningNameListPtr;
		GLuint winningNameCount;
		GLuint shortestDistance = 0xffffffff; 

		for(int i=0; i<hits; i++){
			names = *hitPtr;//the first element of hitPtr record is the number of names we have given the first hit object
			cout<<"namecount:"<<names<<"\n";
			hitPtr++;//the second element is the z-distance
			if(*hitPtr < shortestDistance){
				winningNameCount = names;
				shortestDistance = *hitPtr;
				winningNameListPtr = hitPtr+2;//skip over the min/max values for the hit surface to the name list;
			}
			hitPtr += names+2; //skip over the rest of the hit record
		}

		hitPtr = winningNameListPtr;
		//I only expect one name so far, although multiple are supported
		cout<<"index:"<<*winningNameListPtr<<"\n";
		return *winningNameListPtr;//return name, which is the array integer of our som value
	}
	
	void startPicking(int x, int y){

		GLint viewport[4];

		glSelectBuffer(BUFSIZE,selectBuf);
		glRenderMode(GL_SELECT);

		glMatrixMode(GL_PROJECTION);
		glPushMatrix();
		glLoadIdentity();

		glGetIntegerv(GL_VIEWPORT,viewport);
		gluPickMatrix(x,viewport[3]-y,5,5,viewport);
		gluPerspective(45.0,sdl.screen_w/(float)sdl.screen_h,0.1,100);
		glMatrixMode(GL_MODELVIEW);
		glInitNames();

	}

	int stopPicking(){
	
		int hits;
		
		// restoring the original projection matrix
		glMatrixMode(GL_PROJECTION);
		glPopMatrix();
		glMatrixMode(GL_MODELVIEW);
		glFlush();
		
		// returning to normal rendering mode
		hits = glRenderMode(GL_RENDER);
		
		// if there are hits process them
		if (hits != 0)
			return processHits(hits,selectBuf);
		else
			return -1;

	}
	
	void draw3DBox(vector<float> Locations, vector<float> Dimensions, vector<int> Color, float Alpha){
		vector<float>::iterator Di = Dimensions.begin();
		vector<float>::iterator Li = Locations.begin();
	
		glColor4f(Color[0]/255.0,Color[1]/255.0,Color[2]/255.0,Alpha);
		glBindTexture(GL_TEXTURE_2D,1);
		glBegin(GL_QUADS);
		//front
		glTexCoord2f(0.0,0.0);
		glVertex3f(Li[0],Li[1],Li[2]);
		glTexCoord2f(0.0,1.0);
		glVertex3f(Li[0],Li[1]+Di[1],Li[2]);
		glTexCoord2f(1.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1]+Di[1],Li[2]);
		glTexCoord2f(1.0,0.0);
		glVertex3f(Li[0]+Di[0],Li[1],Li[2]);
		//bottom
		glTexCoord2f(0.0,0.0);
		glVertex3f(Li[0],Li[1],Li[2]);
		glTexCoord2f(0.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1],Li[2]);
		glTexCoord2f(1.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1],Li[2]+Di[2]);
		glTexCoord2f(1.0,0.0);
		glVertex3f(Li[0],Li[1],Li[2]+Di[2]);
		//top
		glTexCoord2f(0.0,0.0);
		glVertex3f(Li[0],Li[1]+Di[1],Li[2]+Di[2]);
		glTexCoord2f(0.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1]+Di[1],Li[2]+Di[2]);
		glTexCoord2f(1.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1]+Di[1],Li[2]);
		glTexCoord2f(1.0,0.0);
		glVertex3f(Li[0],Li[1]+Di[1],Li[2]);
		//back
		glTexCoord2f(0.0,0.0);
		glVertex3f(Li[0],Li[1],Li[2]+Di[2]);
		glTexCoord2f(0.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1],Li[2]+Di[2]);
		glTexCoord2f(1.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1]+Di[1],Li[2]+Di[2]);
		glTexCoord2f(1.0,0.0);
		glVertex3f(Li[0],Li[1]+Di[1],Li[2]+Di[2]);
		//right
		glTexCoord2f(0.0,0.0);
		glVertex3f(Li[0],Li[1],Li[2]+Di[2]);
		glTexCoord2f(0.0,1.0);
		glVertex3f(Li[0],Li[1]+Di[1],Li[2]+Di[2]);
		glTexCoord2f(1.0,1.0);
		glVertex3f(Li[0],Li[1]+Di[1],Li[2]);
		glTexCoord2f(1.0,0.0);
		glVertex3f(Li[0],Li[1],Li[2]);
		//left
		glTexCoord2f(0.0,0.0);
		glVertex3f(Li[0]+Di[0],Li[1],Li[2]);
		glTexCoord2f(0.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1]+Di[1],Li[2]);
		glTexCoord2f(1.0,1.0);
		glVertex3f(Li[0]+Di[0],Li[1]+Di[1],Li[2]+Di[2]);
		glTexCoord2f(1.0,0.0);
		glVertex3f(Li[0]+Di[0],Li[1],Li[2]+Di[2]);
		glEnd();
	}

	void drawSOM(model* m){
		//scale all values within our unit cube
		vector<float> Locations;
		Locations.push_back(0);
		Locations.push_back(0);
		Locations.push_back(0);

		vector<float> Dimensions;
		Dimensions.push_back(0);
		Dimensions.push_back(0);
		Dimensions.push_back(0);

		int selectedCell = m->mySOM.selectedCellSingle;
		set<int> BMUGroup = m->mySOM.selectedBMUGroup;
		vector<int> cellGroup = m->mySOM.selectedCellGroup;
		for(int i = 0; i < m->mySOM.h; i++){
			for(int j = 0; j < m->mySOM.w; j++){
				for(int k = 0; k < m->mySOM.d; k++){

					int index = k + (j * m->mySOM.d) + (i * m->mySOM.d * m->mySOM.w);
						
					Locations[0] = (i+1)/(float)m->mySOM.h;
					Locations[1] = (j+1)/(float)m->mySOM.w;
					Locations[2] = (k+1)/(float)m->mySOM.d;
		
					//divide cubes by putting spacers between them
					Locations[0] *=1.5;
					Locations[1] *=1.5;
					Locations[2] *=1.5;

					Dimensions[0] = 1.0/m->mySOM.h;
					Dimensions[1] = 1.0/m->mySOM.w;
					Dimensions[2] = 1.0/m->mySOM.d;
						
					//locate the cell to find color data
					vector<float> cell = m->mySOM.cells[index];

					vector<int> Color;
					Color.push_back((int)cell[0]);
					Color.push_back((int)cell[1]);
					Color.push_back((int)cell[2]);
					
					//if a cell has been selected, render it seperately
					//selected cells are opaque, and opaque must be rendered first
					if(selectedCell >-1 && selectedCell == index){
							vector<int> selectColor;
							selectColor.push_back(0);
							selectColor.push_back(0);
							selectColor.push_back(0);
							draw3DBox(Locations, Dimensions,selectColor,1);

					//if a BMU group has been described, render it with higher opacity.
					//this takes precedence over the cell group, as the BMU group is contained within it
					}else if(BMUGroup.size()>0 && find(BMUGroup.begin(),BMUGroup.end(),index)!= BMUGroup.end()){
						glDepthMask(GL_FALSE);
						glPushName(index);
						draw3DBox(Locations, Dimensions,Color,0.9);
						glPopName();
						glDepthMask(GL_TRUE);


					//if a cell group has been described, render it with higher opacity
					}else if(find(cellGroup.begin(),cellGroup.end(),index)!=cellGroup.end()){
						glDepthMask(GL_FALSE);
						glPushName(index);
						draw3DBox(Locations, Dimensions,Color,0.5);
						glPopName();
						glDepthMask(GL_TRUE);

					//otherwise, render with normal som viewing parameters
					}else{
							//switch to transparent rendering mode.
							//depth testing must be unwritable for transparency to look ok
							glDepthMask(GL_FALSE);

							glPushName(index);
							draw3DBox(Locations, Dimensions, Color, 0.10);
							glPopName();

							//back to opaque rendering
							glDepthMask(GL_TRUE);
					}	
				}
			}
		}
	
	}

	public:
	
	bool mousePickingPass;

	bool init(){
		//only true when the controller recieves a leftmouseup event
		mousePickingPass = false;

		if ( SDL_Init( SDL_INIT_EVERYTHING ) < 0 ){
			return false;
		}

		if ( SDL_SetVideoMode( sdl.screen_w,sdl.screen_h,sdl.screen_bpp,SDL_OPENGL ) == NULL ){
			return false;
		}

		SDL_WM_SetCaption( "SDL GL", NULL );
	
	
		//openGL texturing and depth map configuration
		glEnable(GL_TEXTURE_2D);
		glEnable(GL_DEPTH_TEST);
		glEnable(GL_BLEND); //Enable alpha blending
		glEnable(GL_CULL_FACE);//backface culling for properly rendering transparent cubes
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); //Set the blend function
		glDepthMask(GL_TRUE);
		glDepthFunc(GL_LEQUAL);
		glDepthRange(0.0f,1.0f);

		glBindTexture(GL_TEXTURE_2D,1);
		glPixelStorei(GL_UNPACK_ALIGNMENT,1);

		glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,GL_REPEAT);
		glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,GL_REPEAT);
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
		glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);

		glTexEnvf(GL_TEXTURE_ENV,GL_TEXTURE_ENV_MODE,GL_MODULATE);

		GLint nOfColors;
		GLenum texture_format;
	
		//grab texture as SDL surface	
		SDL_Render::loadimage("./sprites/pxlwhite.png" ,&cubeTexture);	
		//transfer SDL surface into openGL texture
		nOfColors = cubeTexture->format->BytesPerPixel;
		if(nOfColors == 4){
			if(cubeTexture->format->Rmask = 0x000000ff){
				texture_format = GL_RGBA;
			}else{
				texture_format = GL_BGRA;
			}
		}else if(nOfColors == 3){
			if(cubeTexture->format->Rmask = 0x000000ff){
				texture_format = GL_RGB;
			}else{
				texture_format = GL_BGR;
			}
		}
	
		glTexImage2D( GL_TEXTURE_2D,0,nOfColors,cubeTexture->w,cubeTexture->h,0,texture_format,GL_UNSIGNED_BYTE,cubeTexture->pixels);
		
	}

	void render(model* m){

		//if the controller has detected a mouse click, it will use this bool to trigger a selection
		//Prevent race conditions: Read the value once into a temp var to make logic decisions from over the course of the function 
		//otherwise we could find no picking here, but at the end decide to do a cleanup of picking routine.
		bool tempMPP = mousePickingPass;

		//if we are waiting for a picking pass, we interrupt the rendering procedure.
		//at the end of this function we do a cleanup interrupt as well
		if (tempMPP){
			startPicking(m->mouseX,m->mouseY);			
		}else{

			glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
			glMatrixMode(GL_PROJECTION);
			glLoadIdentity();

			gluPerspective(45.0,sdl.screen_w/(float)sdl.screen_h,0.1,100);
	
			glMatrixMode(GL_MODELVIEW);
		}

		//glClearDepth(1.0f);

		glLoadIdentity();

		m->cam->step();
		gluLookAt(m->cam->Location[0],m->cam->Location[1],m->cam->Location[2],
			m->cam->Location[0]+(*m->cam->Target)[0],m->cam->Location[1]+(*m->cam->Target)[1],m->cam->Location[2]+(*m->cam->Target)[2],
			(*m->cam->Up)[0],(*m->cam->Up)[1],(*m->cam->Up)[2]);

		drawSOM(m);
		SDL_GL_SwapBuffers();

		//clean up our selection triggering after determining whether an item was selected or not
		if(tempMPP){
			m->mySOM.selectedCellSingle = stopPicking();
			mousePickingPass = !mousePickingPass;
		}
	}

};
